let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/univ/tp/8/805/3
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
set shortmess=aoO
badd +4 src/main/java/fr/usmb/m1isc/compilation/tp/While.java
badd +12 ./src/main/java/fr/usmb/m1isc/compilation/tp/Equ.java
badd +77 ./src/main/cup/AnalyseurSyntaxique.cup
badd +7 ./src/main/java/fr/usmb/m1isc/compilation/tp/Sub.java
badd +25 ./tmp.asm
badd +1 ./src/main/jflex/AnalyseurLexical.flex
badd +30 ./src/main/java/fr/usmb/m1isc/compilation/tp/Not.java
badd +17 ./src/main/java/fr/usmb/m1isc/compilation/tp/And.java
badd +0 ./src/main/java/fr/usmb/m1isc/compilation/tp/Or.java
argglobal
%argdel
$argadd src/main/java/fr/usmb/m1isc/compilation/tp/While.java
edit ./src/main/java/fr/usmb/m1isc/compilation/tp/Equ.java
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 17 + 27) / 54)
exe 'vert 1resize ' . ((&columns * 63 + 96) / 192)
exe '2resize ' . ((&lines * 17 + 27) / 54)
exe 'vert 2resize ' . ((&columns * 63 + 96) / 192)
exe '3resize ' . ((&lines * 16 + 27) / 54)
exe 'vert 3resize ' . ((&columns * 63 + 96) / 192)
exe 'vert 4resize ' . ((&columns * 64 + 96) / 192)
exe 'vert 5resize ' . ((&columns * 63 + 96) / 192)
argglobal
balt ./src/main/java/fr/usmb/m1isc/compilation/tp/Not.java
setlocal fdm=expr
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=4
setlocal fml=1
setlocal fdn=20
setlocal fen
1
normal! zo
3
normal! zo
9
normal! zo
let s:l = 15 - ((14 * winheight(0) + 8) / 17)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 15
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("./src/main/java/fr/usmb/m1isc/compilation/tp/Or.java", ":p")) | buffer ./src/main/java/fr/usmb/m1isc/compilation/tp/Or.java | else | edit ./src/main/java/fr/usmb/m1isc/compilation/tp/Or.java | endif
if &buftype ==# 'terminal'
  silent file ./src/main/java/fr/usmb/m1isc/compilation/tp/Or.java
endif
balt ./src/main/java/fr/usmb/m1isc/compilation/tp/Not.java
setlocal fdm=expr
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
15
normal! zo
15
normal! zo
15
normal! zo
15
normal! zo
let s:l = 21 - ((12 * winheight(0) + 8) / 17)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 21
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("./src/main/java/fr/usmb/m1isc/compilation/tp/And.java", ":p")) | buffer ./src/main/java/fr/usmb/m1isc/compilation/tp/And.java | else | edit ./src/main/java/fr/usmb/m1isc/compilation/tp/And.java | endif
if &buftype ==# 'terminal'
  silent file ./src/main/java/fr/usmb/m1isc/compilation/tp/And.java
endif
balt ./src/main/java/fr/usmb/m1isc/compilation/tp/Sub.java
setlocal fdm=expr
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
15
normal! zo
15
normal! zo
15
normal! zo
15
normal! zo
let s:l = 17 - ((7 * winheight(0) + 8) / 16)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 17
normal! 030|
wincmd w
argglobal
if bufexists(fnamemodify("./tmp.asm", ":p")) | buffer ./tmp.asm | else | edit ./tmp.asm | endif
if &buftype ==# 'terminal'
  silent file ./tmp.asm
endif
balt ./src/main/jflex/AnalyseurLexical.flex
setlocal fdm=expr
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 25 - ((24 * winheight(0) + 26) / 52)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 25
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("./src/main/cup/AnalyseurSyntaxique.cup", ":p")) | buffer ./src/main/cup/AnalyseurSyntaxique.cup | else | edit ./src/main/cup/AnalyseurSyntaxique.cup | endif
if &buftype ==# 'terminal'
  silent file ./src/main/cup/AnalyseurSyntaxique.cup
endif
balt ./src/main/java/fr/usmb/m1isc/compilation/tp/Equ.java
setlocal fdm=expr
setlocal fde=nvim_treesitter#foldexpr()
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 78 - ((33 * winheight(0) + 26) / 52)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 78
normal! 038|
wincmd w
4wincmd w
exe '1resize ' . ((&lines * 17 + 27) / 54)
exe 'vert 1resize ' . ((&columns * 63 + 96) / 192)
exe '2resize ' . ((&lines * 17 + 27) / 54)
exe 'vert 2resize ' . ((&columns * 63 + 96) / 192)
exe '3resize ' . ((&lines * 16 + 27) / 54)
exe 'vert 3resize ' . ((&columns * 63 + 96) / 192)
exe 'vert 4resize ' . ((&columns * 64 + 96) / 192)
exe 'vert 5resize ' . ((&columns * 63 + 96) / 192)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
