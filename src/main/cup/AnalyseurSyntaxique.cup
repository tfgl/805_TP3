/* package et imports */
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.ArrayList;


/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
    // HashMap pour la gestion des variables
    private HashMap<String,Integer> vars = new HashMap<>();
    // gestion des erreurs d'evaluation
    private boolean erreur = false;
    public class Node {
      public String symbol = null;
      public Node left = null, right = null;

      public Node(String symbol) {
        this.symbol = symbol;
      }

      public boolean isLeaf() {
        return right == null && left == null;
      }

      public String toString() {
        String res = symbol;
        if(left != null)
          res += " " + left.toString();

        if(right != null)
          res += " " + right.toString();

        if( !isLeaf() ) res = "("+res+")";
        return res;
      }

      Node pushRight(Node n) {
        if(right != null) right.pushRight(n);
        else right = n;
        return this;
      }

      Node pushLeft(Node n) {
        if(left != null) left.pushLeft(n);
        else left = n;
        return this;
      }

      Node pushRight(String s) {
        if(right != null) right.pushRight(s);
        else right = new Node(s);
        return this;
      }

      Node pushLeft(String s) {
        if(left != null) left.pushLeft(s);
        else left = new Node(s);
        return this;
      }

      String toAsm() {
        String prgm = "";
        Node n = this;
        while( n != null ) {
          Instruction i = parse(n);
          i.action(prgm);
        }
      }
    }

    class Prgm {
      public String code = "CODE SEGMENT\n";
      public ArrayList<String> data = new ArrayList<String>();
      public Prgm() { }

      public void addData(String d) {
        if( !data.contains(d) ) data.add(d);
      }
      public void addCode(String c) { code += c +"\n"; }

      public String close() {
        String dataStr = "DATA SEGMENT\n";
        for(String s: data) {
          dataStr += s;
        }
        dataStr += "DATA ENDS";
        code += "CODE ENDS";
        return dataStr + "\n" + code;
      }
    }

    interface Instruction {
      public String action(Prgm prgm);
    }

    class Let extends Node {
      public Let() { this.symbol = "LET"; }

      public String parse(Prgm prgm) {
        prgm.addData(left.symbol + " DD");
      }
    }
:};

 
parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s != null && s.left >= 0 ) {
                /* Ajoute le numero de ligne  et de colonne*/
                m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
            }
        }
        m = m + message;
        System.err.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN, ELSE, WHILE, DO, EGAL, GT, GTE, NIL, ERROR; 
terminal Integer ENTIER;
terminal String IDENT;
/* non terminaux */
non terminal program, sequence, expression, expr;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc GT, GTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;

/* grammaire */
// un pg est une sequence d'insctions terminee par point
program ::= 
    sequence:s {: System.out.println((Node)s); :} POINT
    ;

// une sequence est une suite d'instructions separes par des point virgules 
sequence ::= expression:e1 SEMI sequence:e2 {: RESULT = new Node(";").pushLeft((Node)e1).pushRight((Node)e2); :}
            | expression:e   {: RESULT = (Node)e; :}
            ;

// une expession est soit une affectation ,une
expression ::= expr:e {: RESULT = (Node)e; :}
             | LET IDENT:nom EGAL expr:e {: RESULT = new Let().pushLeft(nom).pushRight((Node)e); :}
             | WHILE expr:cond DO expression:e {: RESULT = new Node("WHILE").pushLeft((Node)cond).pushRight((Node)e); :}
             | IF expr:cond THEN expression:a1 ELSE expression:a2 {: Node tree = new Node("IF").pushLeft((Node)cond).pushRight("THEN"); tree.right.pushLeft((Node)a1).pushRight("ELSE").pushRight((Node)a2); RESULT = tree; :}
             | error // reprise d'erreurs
             ;

// (; (LET a INPUT) (; (LET b INPUT) (; (WHILE (< 0 b) (; (LET aux (% a b)) (; (LET a b) (LET b aux)))) (OUTPUT a))))
//
//         ;
//   let             ;
// a input   LET                      ;
//          b  input    WHILE              out
//                    <               ;  a
//                  0   b      let           ;
//                          aux  MOD    let    let
//                              a   b  a   b  b   aux

// expression arithmetiques et logiques 
expr ::= NOT:op expr:e            {: RESULT = new Node("NOT").pushLeft((Node)e); :}
       | expr:e1 AND expr:e2      {: RESULT = new Node("AND").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 OR expr:e2       {: RESULT = new Node("OR").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 EGAL expr:e2     {: RESULT = new Node("==").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 GT expr:e2       {: RESULT = new Node("<").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 GTE expr:e2      {: RESULT = new Node("<=").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 PLUS expr:e2     {: RESULT = new Node("+").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 MOINS expr:e2    {: RESULT = new Node("-").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 MUL expr:e2      {: RESULT = new Node("*").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 DIV expr:e2      {: RESULT = new Node("/").pushLeft((Node)e1).pushRight((Node)e2); :}
       | expr:e1 MOD expr:e2      {: RESULT = new Node("%").pushLeft((Node)e1).pushRight((Node)e2); :}
       | MOINS expr:e             {: RESULT = new Node("-").pushLeft((Node)e); :} %prec MOINS_UNAIRE 
       | OUTPUT expr:e            {: RESULT = new Node("OUTPUT").pushLeft((Node)e); :}
       | INPUT                    {: RESULT = new Node("INPUT"); :}
       | NIL                      {: RESULT = new Node("NIL"); :}
       | ENTIER:n                 {: RESULT = new Node(((Integer)n).toString()); :}
       | IDENT:id                 {: RESULT = new Node((String)id); :}
       | PAR_G sequence:e PAR_D   {: RESULT = (Node)e; :}
       ;
