/* package et imports */
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;
import java.util.HashMap;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
    // HashMap pour la gestion des variables
    private HashMap<String,Integer> vars = new HashMap<>();
    // gestion des erreurs d'evaluation
    private boolean erreur = false;

    public Prgm prgm = new Prgm();
:};

 
parser code {:
  // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
  public void report_error(String message, Object info) {
    String m = "";
    if (info instanceof java_cup.runtime.Symbol) {
      Symbol s = ((Symbol) info);     
      if (s != null && s.left >= 0 ) {
        /* Ajoute le numero de ligne  et de colonne*/
        m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
      }
    }
    m = m + message;
    System.err.println(m);
  }
:};

init with {:
  //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN, ELSE, WHILE, DO, EGAL, LT, LTE, GT, GTE, NIL, ERROR; 
terminal Integer ENTIER;
terminal String IDENT;
/* non terminaux */
non terminal Node program, sequence, expression, expr;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc LT, LTE, GT, GTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;

/* grammaire */
// un pg est une sequence d'insctions terminee par point
program ::= 
    sequence:s {: System.out.println(s); System.out.println(prgm.compile(s).close()); :} POINT
    ;

// une sequence est une suite d'instructions separes par des point virgules 
sequence ::= expression:e1 SEMI sequence:e2 {: RESULT = new Sequence(e1, e2); :}
            | expression:e   {: RESULT = e; :}
            ;

// une expession est soit une affectation ,une
expression ::= expr:e {: RESULT = e; :}
             | LET IDENT:nom EGAL expr:e                          {: RESULT = new Let(nom, e); :}
             | WHILE expr:cond DO expression:e                    {: RESULT = new While(cond, e); :}
             | IF expr:cond THEN expression:a1 ELSE expression:a2 {: RESULT = new If(cond, a1, a2); :}
             | error // reprise d'erreurs
             ;

// expression arithmetiques et logiques 
expr ::= NOT:op expr:e            {: RESULT = new Not(e);      :}
       | expr:e1 AND expr:e2      {: RESULT = new And(e1, e2); :}
       | expr:e1 OR expr:e2       {: RESULT = new Or (e1, e2); :}
       | expr:e1 EGAL expr:e2     {: RESULT = new Equ(e1, e2); :}
       | expr:e1 LT expr:e2       {: RESULT = new Lt (e1, e2); :}
       | expr:e1 LTE expr:e2      {: RESULT = new Lte(e1, e2); :}
       | expr:e1 GT expr:e2       {: RESULT = new Gt (e1, e2); :}
       | expr:e1 GTE expr:e2      {: RESULT = new Gte(e1, e2); :}
       | expr:e1 PLUS expr:e2     {: RESULT = new Add(e1, e2); :}
       | expr:e1 MOINS expr:e2    {: RESULT = new Sub(e1, e2); :}
       | expr:e1 MUL expr:e2      {: RESULT = new Mul(e1, e2); :}
       | expr:e1 DIV expr:e2      {: RESULT = new Div(e1, e2); :}
       | expr:e1 MOD expr:e2      {: RESULT = new Mod(e1, e2); :}
       | MOINS expr:e             {: RESULT = new Neg(e);      :} %prec MOINS_UNAIRE 
       | OUTPUT expr:e            {: RESULT = new Output(e);   :}
       | INPUT                    {: RESULT = new Input();     :}
       | NIL                      {: RESULT = new Nil();       :}
       | ENTIER:n                 {: RESULT = new Entier(n.toString()); :}
       | IDENT:id                 {: RESULT = new Ident(id); :}
       | PAR_G sequence:e PAR_D   {: RESULT = e; :}
       ;
